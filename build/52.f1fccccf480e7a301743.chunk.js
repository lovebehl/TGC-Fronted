(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{"0bf1468f14a933f1ad60":function(e,o,n){"use strict";n.r(o);n("8af190b70a6bc55c6f1b");var i,t=n("0d7f0986bcd2f33d8a2a"),r=n("1037a6e0d5914309f74c"),d=n.n(r),a=n("24cc9907553994c87418"),s=n.n(a),c=n("c7abe78273b4cfddc037"),l=n.n(c),m=n("4dd2a92e69dcbe1bab10"),p=n("188313d2a36e593a5011");function h(e,o,n,t){i||(i="function"===typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var r=e&&e.defaultProps,d=arguments.length-3;if(o||0===d||(o={children:void 0}),1===d)o.children=t;else if(d>1){for(var a=new Array(d),s=0;s<d;s++)a[s]=arguments[s+3];o.children=a}if(o&&r)for(var c in r)void 0===o[c]&&(o[c]=r[c]);else o||(o=r||{});return{$$typeof:i,type:e,key:void 0===n?null:""+n,ref:null,props:o,_owner:null}}var b=h(p.j,{}),u=h(p.m,{}),v=h(s.a,{children:" | innerWidth | xs | sm | md | lg | xl |\n | - | - | - | - | - | - |\n | width  |   xs   |   sm   |   md   |   lg   |   xl |\n | smUp   |   show | hide  |\n | mdDown |        |       |     hide | show |",remarkPlugins:[l.a]}),f=h(p.b,{}),w=h(p.c,{});o.default=function(){var e=d.a.name+" - Layout",o=d.a.desc,n="containers/Layouts/demos/";return h("div",{},void 0,h(t.Helmet,{},void 0,h("title",{},void 0,e),h("meta",{name:"description",content:o}),h("meta",{property:"og:title",content:e}),h("meta",{property:"og:description",content:o}),h("meta",{property:"twitter:title",content:e}),h("meta",{property:"twitter:description",content:o})),h(m.nb,{title:"Media Queries",icon:"ion-ios-phone-portrait",desc:"CSS media queries is the idiomatic approach to make your UI responsive.. We provide some CSS-in-JS helpers to do so. In the following demo, we change the background color (red, blue & green) based on the screen width."},void 0,h("div",{},void 0,b,h(m.Sb,{componentName:n+"MediaQueries.js"}))),h(m.nb,{title:"With Width",icon:"ion-ios-phone-landscape",desc:"Sometimes, using CSS isn't enough. You might want to change the React rendering tree based on the breakpoint value, in JavaScript. We provide a withWidth() higher-order component for this use case. In the following demo, we change the rendered DOM element (em, u, del & span) based on the screen width."},void 0,h("div",{},void 0,u,h(m.Sb,{componentName:n+"WIthWIdth.js"}))),h(m.nb,{overflowX:!0,title:"Hidden",icon:"ion-ios-eye-outline",desc:"Hidden works with a range of breakpoints e.g. xsUp or mdDown, or one or more breakpoints e.g. only='sm' or only={['md', 'xl']}. Ranges and individual breakpoints can be used simultaneously to achieve very customized behavior. The ranges are inclusive of the specified breakpoints."},void 0,h("div",{},void 0,v,f,h(m.Sb,{componentName:n+"Breakpoint.js"}))),h(m.nb,{title:"Integration with Grid",icon:"ion-ios-grid",desc:"It is quite common to alter Grid at different responsive breakpoints, and in many cases, you want to hide some of those elements."},void 0,h("div",{},void 0,w,h(m.Sb,{componentName:n+"BreakpointGrid.js"}))))}}}]);